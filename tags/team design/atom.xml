<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>「靡不有初，鲜克有终」 - team design</title>
    <subtitle>blog of david</subtitle>
    <link href="https://wendajiang.github.io/tags/team design/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://wendajiang.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-09-28T18:16:59+00:00</updated>
    <id>https://wendajiang.github.io/tags/team design/atom.xml</id>
    <entry xml:lang="en">
        <title>team topologies review</title>
        <published>2024-09-28T18:16:59+00:00</published>
        <updated>2024-09-28T18:16:59+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://wendajiang.github.io/essay/team-topo-review/" type="text/html"/>
        <id>https://wendajiang.github.io/essay/team-topo-review/</id>
        <content type="html">&lt;h2 id=&quot;conway-s-law-and-why-it-matters&quot;&gt;conway&#x27;s law and why it matters&lt;&#x2F;h2&gt;
&lt;p&gt;康威定律：如果设计一个编译器，你有四个团队，你会获得一个 4-pass 的编译器。&lt;&#x2F;p&gt;
&lt;p&gt;组织结构大于软件架构 -&amp;gt; 如果最开始设计了软件架构，但是没有对应的组织架构，最后获得的软件产品设计一定更像组织结构。&lt;&#x2F;p&gt;
&lt;p&gt;通常人们不会将认知负载考虑进来，但是这是非常影响团队效率的问题，尤其是团队时间长之后，一直增加负责项目，就忽略掉了对于老项目维护的负担，项目切换是需要消耗时间和精力的。&lt;&#x2F;p&gt;
&lt;p&gt;低耦合，高内聚一样适用于团队设计。提出了检测团队健康度的一个方法，如果团队之间发生了非预期的交流，就要看看是不是软件设计不匹配当前的团队设计，是不是 API 接口设计不合理，或者少了一些中间件等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;naive-ying-yong-conway-s-law-ye-hui-fu-mian-zuo-yong&quot;&gt;naive 应用 conway&#x27;s law 也会负面作用&lt;&#x2F;h3&gt;
&lt;p&gt;每个子系统都设计成单独的小团队并不是很好的设计 -- @todo&lt;&#x2F;p&gt;
&lt;p&gt;重新调整组织结构的底层驱动过去常常是裁员或者增加领导的“领地”威望。但是根据康威定律来调整是为了提升软件系统。这两者是不兼容的。强有力的说，为了管理方便或者减少 hc 进行的组织调整会摧毁组织有效构建软件的能力。忽视康威定律进行组织调整就像是儿童进行心脏手术：高度破坏性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;team-first-thinking&quot;&gt;Team-first thinking&lt;&#x2F;h2&gt;
&lt;p&gt;这本书，team 一词的特定含义：稳定的，5-9个人工作于一个目标的团队单元，组织结构中不可分割的一部分。&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
